<%- include('../partials/header') %>

<div class="admin-add-container">
  <section class="admin-add-section glass-card">
    <div class="admin-header">
      <div class="admin-icon">
        <i class="fas fa-user-plus"></i>
      </div>
      <h2>添加管理员</h2>
      <p class="admin-subtitle">创建一个新的管理员账号</p>
    </div>
    
    <% if (error) { %>
      <div class="alert alert-danger">
        <i class="fas fa-exclamation-circle"></i> <%= error %>
      </div>
    <% } %>
    
    <form action="/admin/add-admin" method="POST" class="admin-form" id="addAdminForm">
      <div class="form-group">
        <label for="username">用户名</label>
        <div class="input-with-icon">
          <i class="fas fa-user"></i>
          <input type="text" id="username" name="username" required placeholder="输入管理员用户名" autocomplete="off">
        </div>
        <small>用户名至少需要3个字符</small>
      </div>
      
      <div class="form-group">
        <label for="password">密码</label>
        <div class="input-with-icon">
          <i class="fas fa-lock"></i>
          <input type="password" id="password" name="password" required placeholder="输入管理员密码">
          <span class="password-toggle" id="passwordToggle">
            <i class="fas fa-eye"></i>
          </span>
        </div>
      </div>
      
      <div class="form-group">
        <label for="confirmPassword">确认密码</label>
        <div class="input-with-icon">
          <i class="fas fa-check-circle"></i>
          <input type="password" id="confirmPassword" name="confirmPassword" required placeholder="再次输入密码">
          <span class="password-toggle" id="confirmPasswordToggle">
            <i class="fas fa-eye"></i>
          </span>
        </div>
        <div class="password-strength" id="passwordStrength">
          <div class="strength-bar"></div>
          <span class="strength-text">密码强度: 请输入密码</span>
        </div>
      </div>
      
      <div class="form-group checkbox-group">
        <div class="custom-checkbox">
          <input type="checkbox" id="isSuper" name="isSuper">
          <label for="isSuper">
            <i class="fas fa-crown"></i> 设为超级管理员
          </label>
        </div>
        <small>超级管理员可以添加和删除其他管理员账号</small>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="btn btn-primary" id="createButton">
          <i class="fas fa-user-plus"></i> 创建管理员
        </button>
        <a href="/admin/manage-admins" class="btn btn-secondary">
          <i class="fas fa-arrow-left"></i> 返回
        </a>
      </div>
    </form>
  </section>
  
  <div class="password-decoration">
    <div class="decoration-circle circle-1"></div>
    <div class="decoration-circle circle-2"></div>
    <div class="decoration-circle circle-3"></div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('addAdminForm');
    const createButton = document.getElementById('createButton');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const passwordToggles = document.querySelectorAll('.password-toggle');
    const passwordStrength = document.getElementById('passwordStrength');
    const strengthBar = passwordStrength.querySelector('.strength-bar');
    const strengthText = passwordStrength.querySelector('.strength-text');
    
    // 页面加载时设置焦点和动画
    setTimeout(() => {
      document.querySelector('.admin-add-section').classList.add('fade-in');
      usernameInput.focus();
    }, 300);
    
    // 密码可见性切换
    passwordToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const input = toggle.previousElementSibling;
        
        if (input.type === 'password') {
          input.type = 'text';
          toggle.innerHTML = '<i class="fas fa-eye-slash"></i>';
        } else {
          input.type = 'password';
          toggle.innerHTML = '<i class="fas fa-eye"></i>';
        }
        
        // 保持焦点在输入框
        input.focus();
      });
    });
    
    // 按钮动画效果
    function addLoadingState() {
      createButton.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> 创建中...';
      createButton.disabled = true;
      createButton.style.opacity = '0.8';
    }
    
    // 检查密码强度
    function checkPasswordStrength(password) {
      let score = 0;
      if (!password) return score;
      
      // 长度检查
      if (password.length >= 8) score += 1;
      if (password.length >= 12) score += 1;
      
      // 复杂度检查
      if (/[A-Z]/.test(password)) score += 1;
      if (/[a-z]/.test(password)) score += 1;
      if (/[0-9]/.test(password)) score += 1;
      if (/[^A-Za-z0-9]/.test(password)) score += 1;
      
      return score;
    }
    
    // 更新密码强度显示
    function updatePasswordStrength() {
      const password = passwordInput.value;
      const score = checkPasswordStrength(password);
      let strengthClass = '';
      let strengthMessage = '';
      
      if (!password) {
        strengthClass = '';
        strengthMessage = '请输入密码';
      } else if (score < 3) {
        strengthClass = 'weak';
        strengthMessage = '弱';
      } else if (score < 5) {
        strengthClass = 'medium';
        strengthMessage = '中等';
      } else {
        strengthClass = 'strong';
        strengthMessage = '强';
      }
      
      strengthBar.className = 'strength-bar ' + strengthClass;
      strengthText.textContent = '密码强度: ' + strengthMessage;
      
      if (strengthClass === 'weak') {
        strengthText.innerHTML += ' <small>(建议使用大小写字母、数字和特殊字符)</small>';
      }
    }
    
    passwordInput.addEventListener('input', updatePasswordStrength);
    
    // 表单提交处理
    form.addEventListener('submit', (e) => {
      let hasError = false;
      
      // 验证用户名
      if (usernameInput.value.length < 3) {
        e.preventDefault();
        usernameInput.parentNode.classList.add('input-error');
        usernameInput.parentNode.classList.add('shake-animation');
        setTimeout(() => {
          usernameInput.parentNode.classList.remove('shake-animation');
        }, 500);
        hasError = true;
      }
      
      // 验证密码长度
      if (passwordInput.value.length < 6) {
        e.preventDefault();
        passwordInput.parentNode.classList.add('input-error');
        passwordInput.parentNode.classList.add('shake-animation');
        setTimeout(() => {
          passwordInput.parentNode.classList.remove('shake-animation');
        }, 500);
        hasError = true;
      }
      
      // 验证密码匹配
      if (passwordInput.value !== confirmPasswordInput.value) {
        e.preventDefault();
        confirmPasswordInput.parentNode.classList.add('input-error');
        confirmPasswordInput.parentNode.classList.add('shake-animation');
        setTimeout(() => {
          confirmPasswordInput.parentNode.classList.remove('shake-animation');
        }, 500);
        hasError = true;
      }
      
      if (hasError) {
        return;
      }
      
      // 检查密码强度，询问是否继续
      const score = checkPasswordStrength(passwordInput.value);
      if (score < 3 && passwordInput.value) {
        const confirm = window.confirm('您设置的密码强度较弱，确定要继续吗？');
        if (!confirm) {
          e.preventDefault();
          return;
        }
      }
      
      // 添加加载状态
      addLoadingState();
    });
    
    // 输入框动画效果
    [usernameInput, passwordInput, confirmPasswordInput].forEach(input => {
      input.addEventListener('focus', () => {
        document.querySelectorAll('.input-with-icon').forEach(el => {
          el.classList.remove('input-focus');
        });
        
        input.parentNode.classList.remove('input-error');
        input.parentNode.classList.add('input-focus');
        
        const label = input.parentNode.previousElementSibling;
        if (label && label.tagName === 'LABEL') {
          document.querySelectorAll('.form-group label').forEach(el => {
            el.classList.remove('label-focus');
          });
          label.classList.add('label-focus');
        }
      });
      
      input.addEventListener('blur', () => {
        const hasValue = input.value.trim() !== '';
        
        if (!hasValue) {
          input.parentNode.classList.remove('input-focus');
          
          const label = input.parentNode.previousElementSibling;
          if (label && label.tagName === 'LABEL') {
            label.classList.remove('label-focus');
          }
        }
      });
    });
    
    // 实时检查密码匹配
    confirmPasswordInput.addEventListener('input', () => {
      if (passwordInput.value && confirmPasswordInput.value) {
        if (passwordInput.value !== confirmPasswordInput.value) {
          confirmPasswordInput.parentNode.classList.add('input-warning');
          confirmPasswordInput.parentNode.classList.remove('input-success');
        } else {
          confirmPasswordInput.parentNode.classList.remove('input-warning');
          confirmPasswordInput.parentNode.classList.add('input-success');
        }
      } else {
        confirmPasswordInput.parentNode.classList.remove('input-warning', 'input-success');
      }
    });
  });
</script>

<style>
  /* 自定义复选框样式 */
  .checkbox-group {
    margin-top: 20px;
  }
  
  .custom-checkbox {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .custom-checkbox input[type="checkbox"] {
    display: none;
  }
  
  .custom-checkbox label {
    position: relative;
    padding-left: 30px;
    cursor: pointer;
    display: inline-block;
    font-weight: 500;
    transition: all 0.3s ease;
    color: rgba(51, 51, 51, 0.8);
  }
  
  .custom-checkbox label:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(74, 111, 165, 0.5);
    background: rgba(255, 255, 255, 0.7);
    border-radius: 4px;
    transition: all 0.3s ease;
  }
  
  .custom-checkbox input[type="checkbox"]:checked + label:before {
    background: #4a6fa5;
    border-color: #4a6fa5;
  }
  
  .custom-checkbox input[type="checkbox"]:checked + label:after {
    content: '\f00c';
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
    position: absolute;
    left: 4px;
    top: 1px;
    color: white;
    font-size: 12px;
  }
  
  .custom-checkbox label i {
    color: #ff7e5f;
    margin-right: 5px;
  }
</style>

<%- include('../partials/footer') %> 