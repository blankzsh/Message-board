<%- include('../partials/header') %>

<div class="admin-password-container">
  <section class="change-password-section glass-card">
    <div class="password-header">
      <div class="password-icon">
        <i class="fas fa-key"></i>
      </div>
      <h2>修改密码</h2>
      <p class="password-subtitle">请输入当前密码和新密码进行修改</p>
    </div>
    
    <% if (success) { %>
      <div class="alert alert-success">
        <i class="fas fa-check-circle"></i> <%= success %>
      </div>
    <% } %>
    
    <% if (error) { %>
      <div class="alert alert-danger">
        <i class="fas fa-exclamation-circle"></i> <%= error %>
      </div>
    <% } %>
    
    <form action="/admin/change-password" method="POST" class="change-password-form" id="changePasswordForm">
      <div class="form-group">
        <label for="currentPassword">当前密码</label>
        <div class="input-with-icon">
          <i class="fas fa-lock"></i>
          <input type="password" id="currentPassword" name="currentPassword" required placeholder="输入当前密码" autocomplete="off">
          <span class="password-toggle" id="currentPasswordToggle">
            <i class="fas fa-eye"></i>
          </span>
        </div>
      </div>
      
      <div class="form-group">
        <label for="newPassword">新密码</label>
        <div class="input-with-icon">
          <i class="fas fa-key"></i>
          <input type="password" id="newPassword" name="newPassword" required placeholder="输入新密码" autocomplete="off">
          <span class="password-toggle" id="newPasswordToggle">
            <i class="fas fa-eye"></i>
          </span>
        </div>
        <div class="password-tips" id="passwordTips">
          <small>新密码应当：</small>
          <ul>
            <li class="requirement" id="req-length"><i class="fas fa-circle"></i> 至少包含8个字符</li>
            <li class="requirement" id="req-uppercase"><i class="fas fa-circle"></i> 包含大写字母</li>
            <li class="requirement" id="req-lowercase"><i class="fas fa-circle"></i> 包含小写字母</li>
            <li class="requirement" id="req-number"><i class="fas fa-circle"></i> 包含数字</li>
            <li class="requirement" id="req-special"><i class="fas fa-circle"></i> 包含特殊字符</li>
          </ul>
        </div>
      </div>
      
      <div class="form-group">
        <label for="confirmPassword">确认新密码</label>
        <div class="input-with-icon">
          <i class="fas fa-check-circle"></i>
          <input type="password" id="confirmPassword" name="confirmPassword" required placeholder="再次输入新密码" autocomplete="off">
          <span class="password-toggle" id="confirmPasswordToggle">
            <i class="fas fa-eye"></i>
          </span>
        </div>
        <div class="password-strength" id="passwordStrength">
          <div class="strength-bar"></div>
          <span class="strength-text">密码强度: 请输入密码</span>
        </div>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="btn btn-primary password-btn" id="saveButton">
          <i class="fas fa-save"></i> 保存更改
        </button>
        <a href="/admin/dashboard" class="btn btn-secondary">
          <i class="fas fa-arrow-left"></i> 返回
        </a>
      </div>
    </form>
  </section>
  
  <div class="password-decoration">
    <div class="decoration-circle circle-1"></div>
    <div class="decoration-circle circle-2"></div>
    <div class="decoration-circle circle-3"></div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('changePasswordForm');
    const saveButton = document.getElementById('saveButton');
    const currentPasswordInput = document.getElementById('currentPassword');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const passwordToggles = document.querySelectorAll('.password-toggle');
    const passwordStrength = document.getElementById('passwordStrength');
    const strengthBar = passwordStrength.querySelector('.strength-bar');
    const strengthText = passwordStrength.querySelector('.strength-text');
    
    // 获取密码要求元素
    const reqLength = document.getElementById('req-length');
    const reqUppercase = document.getElementById('req-uppercase');
    const reqLowercase = document.getElementById('req-lowercase');
    const reqNumber = document.getElementById('req-number');
    const reqSpecial = document.getElementById('req-special');
    const passwordTips = document.getElementById('passwordTips');
    
    // 页面加载时设置焦点和动画
    setTimeout(() => {
      document.querySelector('.change-password-section').classList.add('fade-in');
      currentPasswordInput.focus();
      passwordTips.style.display = 'none';
    }, 300);
    
    // 密码可见性切换
    passwordToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const input = toggle.previousElementSibling;
        
        if (input.type === 'password') {
          input.type = 'text';
          toggle.innerHTML = '<i class="fas fa-eye-slash"></i>';
        } else {
          input.type = 'password';
          toggle.innerHTML = '<i class="fas fa-eye"></i>';
        }
        
        // 保持焦点在输入框
        input.focus();
      });
    });
    
    // 按钮动画效果
    function addLoadingState() {
      saveButton.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> 保存中...';
      saveButton.disabled = true;
      saveButton.style.opacity = '0.8';
    }
    
    // 检查密码强度
    function checkPasswordStrength(password) {
      let score = 0;
      if (!password) return score;
      
      // 长度检查
      if (password.length >= 8) {
        score += 1;
        reqLength.classList.add('met');
      } else {
        reqLength.classList.remove('met');
      }
      
      // 大写字母检查
      if (/[A-Z]/.test(password)) {
        score += 1;
        reqUppercase.classList.add('met');
      } else {
        reqUppercase.classList.remove('met');
      }
      
      // 小写字母检查
      if (/[a-z]/.test(password)) {
        score += 1;
        reqLowercase.classList.add('met');
      } else {
        reqLowercase.classList.remove('met');
      }
      
      // 数字检查
      if (/[0-9]/.test(password)) {
        score += 1;
        reqNumber.classList.add('met');
      } else {
        reqNumber.classList.remove('met');
      }
      
      // 特殊字符检查
      if (/[^A-Za-z0-9]/.test(password)) {
        score += 1;
        reqSpecial.classList.add('met');
      } else {
        reqSpecial.classList.remove('met');
      }
      
      return score;
    }
    
    // 更新密码强度显示
    function updatePasswordStrength() {
      const password = newPasswordInput.value;
      const score = checkPasswordStrength(password);
      let strengthClass = '';
      let strengthMessage = '';
      
      if (!password) {
        strengthClass = '';
        strengthMessage = '请输入密码';
        passwordTips.style.display = 'none';
      } else {
        passwordTips.style.display = 'block';
        
        if (score < 3) {
          strengthClass = 'weak';
          strengthMessage = '弱';
        } else if (score < 5) {
          strengthClass = 'medium';
          strengthMessage = '中等';
        } else {
          strengthClass = 'strong';
          strengthMessage = '强';
        }
      }
      
      strengthBar.className = 'strength-bar ' + strengthClass;
      strengthText.textContent = '密码强度: ' + strengthMessage;
    }
    
    newPasswordInput.addEventListener('input', updatePasswordStrength);
    newPasswordInput.addEventListener('focus', () => {
      if (newPasswordInput.value) {
        passwordTips.style.display = 'block';
      }
    });
    
    // 表单提交处理
    form.addEventListener('submit', (e) => {
      if (newPasswordInput.value !== confirmPasswordInput.value) {
        e.preventDefault();
        
        confirmPasswordInput.parentNode.classList.add('input-error');
        confirmPasswordInput.parentNode.classList.add('shake-animation');
        
        setTimeout(() => {
          confirmPasswordInput.parentNode.classList.remove('shake-animation');
        }, 500);
        
        return;
      }
      
      const score = checkPasswordStrength(newPasswordInput.value);
      if (score < 3 && newPasswordInput.value) {
        const confirm = window.confirm('您设置的密码强度较弱，确定要继续吗？');
        if (!confirm) {
          e.preventDefault();
          return;
        }
      }
      
      // 添加加载状态
      addLoadingState();
    });
    
    // 输入框动画效果
    [currentPasswordInput, newPasswordInput, confirmPasswordInput].forEach(input => {
      input.addEventListener('focus', () => {
        // 移除所有其他输入框的焦点类
        document.querySelectorAll('.input-with-icon').forEach(el => {
          el.classList.remove('input-focus');
        });
        
        // 添加当前输入框的焦点类
        input.parentNode.classList.remove('input-error');
        input.parentNode.classList.add('input-focus');
        
        // 同时更新相应的标签
        const label = input.parentNode.previousElementSibling;
        if (label && label.tagName === 'LABEL') {
          document.querySelectorAll('.form-group label').forEach(el => {
            el.classList.remove('label-focus');
          });
          label.classList.add('label-focus');
        }
      });
      
      input.addEventListener('blur', () => {
        const hasValue = input.value.trim() !== '';
        
        if (!hasValue) {
          input.parentNode.classList.remove('input-focus');
          
          // 同时更新相应的标签
          const label = input.parentNode.previousElementSibling;
          if (label && label.tagName === 'LABEL') {
            label.classList.remove('label-focus');
          }
        }
      });
      
      // 添加输入动画效果
      input.addEventListener('input', () => {
        if (input.value.trim() !== '') {
          input.parentNode.classList.add('has-content');
        } else {
          input.parentNode.classList.remove('has-content');
        }
      });
    });
    
    // 实时检查密码匹配
    confirmPasswordInput.addEventListener('input', () => {
      if (newPasswordInput.value && confirmPasswordInput.value) {
        if (newPasswordInput.value !== confirmPasswordInput.value) {
          confirmPasswordInput.parentNode.classList.add('input-warning');
          confirmPasswordInput.parentNode.classList.remove('input-success');
        } else {
          confirmPasswordInput.parentNode.classList.remove('input-warning');
          confirmPasswordInput.parentNode.classList.add('input-success');
        }
      } else {
        confirmPasswordInput.parentNode.classList.remove('input-warning', 'input-success');
      }
    });
    
    // 装饰圆圈动画效果（随鼠标移动）
    const section = document.querySelector('.change-password-section');
    const circles = document.querySelectorAll('.decoration-circle');
    
    if (section && circles.length) {
      section.addEventListener('mousemove', (e) => {
        const x = e.clientX;
        const y = e.clientY;
        
        circles.forEach((circle, index) => {
          const factor = (index + 1) * 10;
          const xOffset = (x - window.innerWidth / 2) / factor;
          const yOffset = (y - window.innerHeight / 2) / factor;
          
          circle.style.transform = `translate(${xOffset}px, ${yOffset}px)`;
        });
      });
    }
  });
</script>

<style>
  /* 密码管理页面特有的样式 */
  .admin-password-container {
    position: relative;
    max-width: 600px;
    margin: 50px auto;
    z-index: 1;
  }
  
  .change-password-section {
    opacity: 0;
    transform: translateY(20px);
  }
  
  .fade-in {
    animation: fadeIn 0.6s ease forwards;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .password-header {
    text-align: center;
    margin-bottom: 30px;
  }
  
  .password-icon {
    width: 80px;
    height: 80px;
    margin: 0 auto 20px;
    background: linear-gradient(135deg, #4a6fa5, #6e8cb6);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 10px 25px rgba(74, 111, 165, 0.3);
    position: relative;
    overflow: hidden;
  }
  
  .password-icon:before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: conic-gradient(transparent, rgba(255, 255, 255, 0.4), transparent 30%);
    animation: rotate 4s linear infinite;
  }
  
  @keyframes rotate {
    100% { transform: rotate(360deg); }
  }
  
  .password-icon i {
    font-size: 32px;
    color: white;
    position: relative;
    z-index: 2;
  }
  
  /* 密码提示 */
  .password-tips {
    background: rgba(255, 255, 255, 0.5);
    border-radius: 8px;
    padding: 10px 15px;
    margin-top: 10px;
    border-left: 3px solid #4a6fa5;
    transition: all 0.3s ease;
  }
  
  .password-tips small {
    display: block;
    margin-bottom: 5px;
    color: #4a6fa5;
    font-weight: 500;
  }
  
  .password-tips ul {
    margin: 0;
    padding-left: 20px;
  }
  
  .requirement {
    margin-bottom: 3px;
    font-size: 13px;
    color: rgba(51, 51, 51, 0.7);
    transition: all 0.3s ease;
  }
  
  .requirement i {
    font-size: 10px;
    margin-right: 5px;
  }
  
  .requirement.met {
    color: #4caf50;
  }
  
  .requirement.met i {
    content: '\f058';
  }

  /* 密码强度样式 */
  .password-strength {
    margin-top: 8px;
    font-size: 13px;
  }
  
  .strength-bar {
    height: 4px;
    background-color: #e0e0e0;
    margin-bottom: 5px;
    border-radius: 2px;
    position: relative;
    overflow: hidden;
  }
  
  .strength-bar:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 0;
    transition: width 0.3s ease;
  }
  
  .strength-bar.weak:before {
    width: 30%;
    background-color: #f44336;
  }
  
  .strength-bar.medium:before {
    width: 60%;
    background-color: #ff9800;
  }
  
  .strength-bar.strong:before {
    width: 100%;
    background-color: #4caf50;
  }
  
  .strength-text {
    color: #666;
    font-size: 12px;
    display: block;
  }
  
  .has-content i {
    color: #4a6fa5;
  }
  
  /* 输入框警告和成功状态 */
  .input-warning {
    border-color: #ff9800 !important;
    background-color: rgba(255, 152, 0, 0.05) !important;
  }
  
  .input-success {
    border-color: #4caf50 !important;
    background-color: rgba(76, 175, 80, 0.05) !important;
  }
</style>

<%- include('../partials/footer') %> 